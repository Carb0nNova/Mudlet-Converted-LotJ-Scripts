lotj = lotj or {}
lotj.calc = lotj.calc or {}

registerAnonymousEventHandler("sysInstall", "lotj.calc.Installed")

function lotj.calc.Installed(_, name)
  if name == "LotjCalc" then
    cecho("LotjCalc Installed! Running first time init!\m")
    lotj.calc.Init()
  end
end

function lotj.calc.clearVariables()
    lotj.calc.planets = {}
    lotj.calc.planetname = ""
    lotj.calc.systemname = ""
    lotj.calc.coordX = 0
    lotj.calc.coordY = 0
    lotj.calc.coordZ = 0

    lotj.calc.spaceCoords = {}
end

function lotj.calc.startCalc(matches)
    local sentArg = matches[2]

    if sentArg == "" then -- we entered "calc" with no args, so pass it through
        send("calculate")
        return
    end
    if sentArg == "stop" then -- entered "calc stop", pass it through
        planetname = ""
        send("calculate stop")
        return
    end
    if string.findPattern(sentArg, "local", 0, true) then -- we entered calc local x y z, pass it through
        planetname = "local"
        send("calculate "..matches[2])
        return
    end
    if string.findPattern(sentArg, "%'[%d-]* [%d-]*%'", 0, false) then -- we entered an uncharted sector in 'x y' x y z format
        -- set our planetname to the x y coordinates
        local xstart, xend = string.findPattern(sentArg, "%'[%d-]+", 0, false)
        local xcoord = string.sub(sentArg, xstart+1, xend)
        local ystart, yend = string.findPattern(sentArg, "[%d-]+%'", xend, false)
        local ycoord = string.sub(sentArg, ystart, yend-1)
        --cecho("xstart: "..xstart.." xend: "..xend.." xcoord: "..xcoord)
        --cecho("ystart: "..ystart.." yend: "..yend.." ycoord: "..ycoord)

        --planetname = (..xcoord.., " ", ..ycoord..)
        --cecho(GetVariable("planetname"))
        send("calculate "..sentArg)
        return
    end
    -- add option to enter calc x y x y z for uncharted sectors here
    if (sentArg ~= nil and sentArg ~= "stop") then -- we entered a standard planetname
        lotj.calc.planetName = string.trim(sentArg)
        cecho("<yellow>Calculating hyperspace trajectory to "..lotj.calc.planetName.."\n")
        enableTrigger("ShowPlanets")
        send("showplanet "..lotj.calc.planetName, false)
    else
        print("Invalid planet name!\n")
    end
    
    
    
end

function lotj.calc.showplanetSuccess()
    enableTrigger("CalcCaps")
end

function lotj.calc.showplanetFailure()
	toggleCalcOff()
	disableTrigger("CalcCaps")
	cecho("<red>Planet lookup failed.\n")
end

function lotj.calc.planetCheck(matches)
    if (matches ~= nil) then
        if string.lower(planetname) == string.lower(matches[2]) then
            planetName = trostring(matches[2])
            return true
        end
    else
        cecho("<red>Invalid planet found.\n")
        lotj.calc.toggleCalcOff()
        disableTrigger("CalcCaps")
        return false
    end
end

function lotj.calc.setSystem(matches)
    lotj.calc.systemName = matches[2]
end

function lotj.calc.setCoordinates(matches)
    lotj.calc.coordX = matches[2]
    lotj.calc.coordY = matches[3]
    lotj.calc.coordZ = matches[4]
end

function lotj.calc.capFinished()
	local newX = coordX + 500
	lotj.calc.toggleCalcOff()
	disableTrigger("CalcCaps")
	cecho("\n<green>System found: " .. lotj.calc.systemName .. "\n")
    cecho("<green>Coordinates found: " .. lotj.calc.coordX .. ", " .. lotj.calc.coordY .. ", " .. lotj.calc.coordZ .. "\n")
	send("calculate \"" .. lotj.calc.systemName .. "\" " .. newX .. " " .. lotj.calc.coordY .. " " .. lotj.calc.coordZ, false)
end

function lotj.calc.toggleCalcOff()
   disableTrigger("CalcCaps")
   disableTrigger("ShowPlanets")
end