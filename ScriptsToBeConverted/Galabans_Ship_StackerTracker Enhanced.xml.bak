<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<!-- Plugin "Galabans_Ship_StackerTracker" generated by Galaban's own hand -->

<muclient>
<plugin
   name="Galabans_Ship_StackerTracker"
   author="Galaban + Domovoi"
   id="ffa66987e0b9d16c0c671917"
   language="Lua"
   purpose="Stack and Track ships"
   save_state="y"
   date_written="2016-02-25 13:41:02"
   requires="4.60"
   version="1.1"
   >
<description trim="y">
<![CDATA[
This will see the ships on the pad and stack them so that they are more readable.  Also, this will log the information when locating a ship so that the name is printed next to the ship when it is seen again.

How to use:

* When you first enter a room with ships, it will not store those ships.  Wait half a second and then "look" around. You will see the ships storing to the database.
  The problem is that LOTJ's MSDP does not send the room data immediately with the room. Thank the coders for that one...

* Ship pads are not considered valid until you call locateship for one on that pad.  Once it's part of the list of valid pads, it will start storing the ships on that pad.

* Once an owner is known for a ship, it will display next to the ship, when you see it on the pad or in space.

Limitations:

* The first time the plugin stores a pad in the database, it will take a bit (1-3 seconds).  After that, it should be mush quicker.

* On Corellia, we will not automatically store which ships are there.  To workaround this, enter "logships" to store the ships in that room.
  The reason for this is due to Corellia have more than one pad directly next to each other.

* Occasionally, items in the room will appear before the ship list... But one is not fixable, unfortunately.
  Anything that triggers on items/people/mobs in the room may fire before the list of ships because of this.
  
Enhancements made by Domovoi:
Better handling for manual DB deletion.
Dealing with Miy'til fighters
Character-specific databases
Automatic database deletion on 5 failed locateship attempts
Autolocating oldest or unowned(or unknown)

]]>
</description>

</plugin>


<!--  Aliases -->

<aliases>
  <alias
   match="^ship..ack(er)? (.+)$"
   regexp="y"
   enabled="y"
   expand_variables="y"
   sequence="100"
   script="formatShipStack"
  >
  </alias>
  <alias
   match="^ship..ack(er)?$"
   regexp="y"
   enabled="y"
   expand_variables="y"
   sequence="100"
   script="helpShipStack"
  >
  </alias>

  <alias
   match="^logships$"
   regexp="y"
   enabled="y"
   expand_variables="y"
   sequence="100"
   script="manualStoreShips"
  >
  </alias>
  
   <alias
   match="^autolocate (oldest|unowned|off)$"
   regexp="y"
   enabled="y"
   expand_variables="y"
   sequence="100"
   script="autoLocate"
  >
  </alias>

</aliases>


<!--  Triggers  -->

<triggers>

    <!-- Standard ship list, 2 per line -->
    <trigger expand_variables="y" group="captureTriggers" 
        match="^[\w\s\d'?\-]+(\ \'[\w\s\d\-]+\')(\s*)([\w\s\d\-'?]+)(\ \'[\w\s\d\-]+\')(\s*)$" enabled="n" regexp="y" keep_evaluating="y" 
        match_text_colour="y" text_colour="14" 
        omit_from_output="y" omit_from_log="y" 
        send_to="12" sequence="10">
    <send>grabShips("%0")</send>
    </trigger>

    <!-- Ship launching (Note: no color match, but must have "[Launching]" in the text. -->
    <trigger expand_variables="y" group="captureTriggers" 
        match="^\[Launching\][\w\s\d\-\'?]+(\ \'[\w\s\d\-]+\')(\s*)(\[Launching\])?([\w\s\d\-\'?]+)(\ \'[\w\s\d\-]+\')(\s*)$" enabled="n" regexp="y" keep_evaluating="y" 
        match_text_colour="n" text_colour="14" 
        omit_from_output="y" omit_from_log="y" 
        send_to="12" sequence="10">
    <send>grabShips("%0")</send>
    </trigger>
    
    <!-- Single ship launching (Note: no color match, but must have "[Launching]" in the text. -->
    <trigger expand_variables="y" group="captureTriggers" 
        match="^\[Launching\][\w\s\d\-\'?]+(\ \'[\w\s\d\-]+\')(\s*)$" enabled="n" regexp="y" keep_evaluating="y" 
        match_text_colour="n" text_colour="14" 
        omit_from_output="y" omit_from_log="y" 
        send_to="12" sequence="10">
    <send>grabShips("%0")</send>
    </trigger>

    <!-- Single ship -->
    <trigger expand_variables="y" group="captureTriggers" 
        match="^[\w\s\d\[\]\'?.-]+(\ \'[\w\s\d\[\]?.-]+\')(\s*)$$" enabled="n" regexp="y" keep_evaluating="y" 
        match_text_colour="y" text_colour="14" 
        omit_from_output="y" omit_from_log="y"
        send_to="12" sequence="100">
    <send>grabShip("%0")</send>
    </trigger>

    <!-- Ship in Space -->
    <trigger expand_variables="y" group="captureTriggers" 
        match="^[\w\s\d\'?.-]+(\ \'[\w\s\d.-]+\')(\s*)$" enabled="n" regexp="y" keep_evaluating="y" 
        match_text_colour="y" text_colour="11" 
        omit_from_output="y" omit_from_log="y"
        send_to="12" sequence="10" script="shipInSpace" />
    
    <!-- Stop grabbing -->
	<trigger script="stopGrabbing" match="^$" enabled="n" regexp="y" group="endCaptures" name="endCaptureNewLine" sequence="10" />
	<trigger script="stopGrabbingNoShip" match="^[^\']+$" enabled="n" regexp="y" omit_from_output="y" omit_from_log="y" 
            group="endCaptures" name="endCaptureNoShip" sequence="11" />

    <!-- On the pad -->
	<trigger script="obviousExits" match="^Obvious exits\:$" enabled="y" regexp="y"  sequence="10" group="startCaptures" />

    <!-- In the ship, looking out -->
    <!-- In Space -->
	<trigger script="outShipWindow" match="^Through the transparisteel windows you see\:$" enabled="y" regexp="y"  sequence="10" group="startCaptures" />

    <!-- Scanning -->
    <trigger script="scanning" match="^Scanning .*\.\.\.$" enabled="y" regexp="y"  sequence="10" group="startCaptures" />

	<trigger script="scanGrabPadName" match="^[^\']+$" enabled="n" regexp="y" omit_from_output="n" omit_from_log="n" 
            group="scanPad" name="scanPadName" sequence="100" />


    <!-- Ship location triggers -->
	<trigger script="startLocationCapture" match="You manage to locate a record on the target vessel..." enabled="y" sequence="100" />
	
	
	<trigger script="locateAgain" match="You were unable to locate any records on the target ship." enabled="y" sequence="100" group="DBScan"/>

    <!-- Capture data -->
	<trigger match="Ship Information: *" enabled="n" sequence="100" group="locationCaptures" send_to="12" expand_variables="y">
        <send>shipDataName("%1")</send>
    </trigger>
	<trigger match="Ship Owner: *" enabled="n" sequence="100" group="locationCaptures" send_to="12" expand_variables="y">
        <send>shipDataOwner("%1")</send>
    </trigger>
	<trigger match=" Dock: *" enabled="n" sequence="100" group="locationCaptures" send_to="12" expand_variables="y">
        <send>shipDataPad("%1")</send>
    </trigger>
	<trigger match=" Planet: *" enabled="n" sequence="100" group="locationCaptures" send_to="12" expand_variables="y">
        <send>shipDataPlanet("%1")</send>
    </trigger>

    <!-- Closing DB on quit or death-->
    <trigger script="closeDB" match="Your surroundings begin to fade as a mystical swirling vortex of colors" enabled="y" sequence="100" group="DBMaint"/>
    <trigger script="closeDB" match="..Everything begins to fade to black" enabled="y" sequence="100" group="DBMaint"/>
</triggers>


<!--  Script  -->


<script>
<![CDATA[

-- Dependencies
require("sqlite3")
require "checkplugin"
do_plugin_check_now("b3aae34498d5bf19b5b2e2af", "LotJMSDPHandler")
dofile(GetPluginInfo(GetPluginID(), 20) .. "lotj_colors.lua")


------------------------------
-- Global Variables
local shipstackFormat = tonumber(GetVariable("shipstackFormat") or "2")
local shipstackEnabled = GetVariable("shipstackEnabled") or "true"
locateAttempt = 1
locateType = ""
isAutoLocating = false

local toonName = CallPlugin("b3aae34498d5bf19b5b2e2af","msdpval","CHARACTERNAME")

local shipList = {}         -- current list of processing ships
local countShips = 0

--  Caches
local shipOwnerList = {}
local padList = {}
local cacheShipList = {} 

local dbIsOpen = false

local currPadName = ""      -- For being on a pad/scanning and storing ships
local currPlanet = nil
isFirstLookup = true

------------------------------
-- Global Constants

local b_black = ANSI(1)..ANSI(30)
local d_black = ANSI(22)..ANSI(30)
local b_red = ANSI(1)..ANSI(31)
local d_red = ANSI(22)..ANSI(31)
local b_green = ANSI(1)..ANSI(32)
local d_green = ANSI(1)..ANSI(32)
local b_yellow = ANSI(1)..ANSI(33)
local d_yellow = ANSI(22)..ANSI(33)
local b_cyan = ANSI(1)..ANSI(36)
local d_cyan = ANSI(22)..ANSI(36)
local b_white = ANSI(1)..ANSI(37)
local d_white = ANSI(22)..ANSI(37)

-- Note: owner_list is always +1 over colorlist. (color 1 == owner 2)
local colorList = {b_cyan,b_white,d_cyan,b_green,b_yellow,d_green,d_yellow}
local ownerColorList = {b_white, b_white, b_green, d_white, b_white, b_white, b_white, b_white}
local numColors = 7
local currColorIndx = 1


-----------------------------
--  Plugin/State Processing
function OnPluginSaveState()
    SetVariable("shipstackFormat", shipstackFormat)
    SetVariable("shipstackEnabled", shipstackEnabled)
end

function autoLocate(name, line, args)
    EnableTrigger("DBScan", true)
	if args[1] == "oldest" then
		locateType = "oldest"
        isAutoLocating = true
		LocateOldest()
	elseif args[1] == "unowned" then
		locateType = "unknown"
        isAutoLocating = true
        LocateUnowned()
    elseif args[1] == "off" then
        isAutoLocating = false
        Note("Disabling autolocate")
	end
end

function continueLocate()
	if locateType == "oldest" then
		LocateOldest()
		locateType = "oldest"
	elseif locateType == "unknown" then
		LocateUnowned()
		locateType = "unknown"
	end
	EnableTrigger("DBScan", true)
	isAutoLocating = true
end

function locateAgain()
	local shipID = 0
	if locateAttempt < 5 then
		locateAttempt = locateAttempt +1
		if locateType == "oldest" then
			LocateOldest()
		else
			LocateUnowned()
		end
	else
		ColourNote("red","","Unable to locate ship after 5 attempts. Removing from database.")
		if locateType == "oldest" then
			row = firstRowQueryDB("SELECT * FROM ships WHERE last_lookup IS NOT NULL ORDER BY last_lookup")
			shipID = tonumber(row.id)
		else
			row = firstRowQueryDB("SELECT * FROM ships WHERE owner IS NULL ORDER BY name")
			shipID = tonumber(row.id)
		end
		DatabaseExecute(string.format("DELETE FROM ships WHERE id=%s", shipID))
		locateAttempt = 1
		DoAfterSpecial(1,"continueLocate()", 12)
	end
end

function OnPluginInstall()
    dbIsOpen = false

    if(GetPluginInfo("b3aae34498d5bf19b5b2e2af",1) == nil) then
        shipstackEnabled = false
        AnsiNote(b_red .. "LotJMSDPPluginHelper not installed.")
        AnsiNote(b_white.."You must install that plugin first.")
    end

    -- This is from loading
    if (shipstackEnabled == "false") then 
        disableShipStacking()
        Note("")
        AnsiNote(b_red .. "     Galaban's Ship Stacker is currently disabled.")
        AnsiNote(b_red .. "            Ships will not be stacked.")
        AnsiNote(b_white.."    Use 'shipstacker enable' to enable the plugin.")
        Note("")
    else
        if (shipstackEnabled ~= "true") then
            if (shipstackEnabled ~= nil) then
                Note("")
                AnsiNote(b_red.."[ERROR LOADING Galaban's Ship Stacker].")
                AnsiNote(b_red.."Unexpected value for 'Enabled' found.  Defaulting to true")
            end
            shipstackEnabled = "true"
            OnPluginSaveState()
        end
        enableShipStacking() -- sanity check
    end

    if (shipstackFormat == nil or shipstackFormat < 0 or shipstackFormat > 4) then
        if (shipstackFormat ~= nil) then
            Note("")
            AnsiNote(b_red.."[ERROR LOADING Galaban's Ship Stacker].")
            AnsiNote(b_red.."Unexpected ship format found.  Defaulting to format 1")
        end
        shipstackFormat = 2
        OnPluginSaveState()
    end

    -- Run this before any of the DB loads... just to make sure it has the tables
    InitializeDatabase()

    loadOwnerCacheFromDB()
    loadPadCacheFromDB()
    loadShipCacheFromDB()
end

-----------------------------
--  Utility Functions
function nextColor()
    local nextVal = colorList[currColorIndx]
    currColorIndx = currColorIndx + 1
    if (currColorIndx >= numColors) then
        resetColor()
    end
    return nextVal
end

function ownerColor()
    return ownerColorList[currColorIndx]
end

function resetColor()
    currColorIndx = 1
end

function trim(s)
  return (s:gsub("^%s*(.-)%s*$", "%1"))
end

function split(s)
    local retTab = {}
    if (s == nil or s == "") then return retTab end
    local i = 1
    for v in string.gmatch(s, "[^%s]+") do
        retTab[i] = v
        i = i + 1
    end
    return retTab
end

function spairs(t, order)
    -- collect the keys
    local keys = {}
    for k in pairs(t) do keys[#keys+1] = k end

    -- if order function given, sort by it by passing the table and keys a, b,
    -- otherwise just sort the keys 
    if order then
        table.sort(keys, function(a,b) return order(t, a, b) end)
    else
        table.sort(keys)
    end

    -- return the iterator function
    local i = 0
    return function()
        i = i + 1
        if keys[i] then
            return keys[i], t[keys[i]]
        end
    end
end

function clearList()
    shipList = {}

    count = #shipList
    for i=0, count do shipList[i]=nil end

    countShips = 0
end

function getmsdp(fieldname)
	rc, result = CallPlugin("b3aae34498d5bf19b5b2e2af","msdpval",fieldname)
	
	if result ~= nil then
	  return result
	else
	  return ""
	end
end



-----------------------------
--  Enable/Disable functions
function disableShipStacking()
    EnableTriggerGroup("startCaptures",false)
    closeDB() 
end

function enableShipStacking()
    EnableTriggerGroup("startCaptures",true)
end

-----------------------------
--  Alias Handlers
function helpShipStack()
    AnsiNote(b_green.."----------------------------------------------------------------------")
    AnsiNote(b_white.."              Galaban's Ship Stacker and Tracker")
    AnsiNote(b_red .. "shipstacker help"..b_white..": Detailed explanation of how to use this plugin")
    AnsiNote(b_red .. "shipstacker"..b_white..":    This screen")
    Note("")
    AnsiNote(b_red .. "shipstacker 0"..b_white..":  Standard mud output, but sorted and with the owner")
    AnsiNote(b_red .. "shipstacker 1"..b_white..":  One ship per line, sorted with the owner")
    AnsiNote(b_red .. "shipstacker 2"..b_white..":  Display types and names of the ships (sorted)")
    AnsiNote(b_red .. "shipstacker 3"..b_white..":  Display ship types, with the count of that type")
    AnsiNote(b_red .. "shipstacker 4"..b_white..":  Display the total count of ships")
    Note("")
    AnsiNote(b_red .. "shipstacker disable"..b_white..": Disable the ship stacking and tracking")
    AnsiNote(b_red .. "shipstacker enable"..b_white..":  Umm...enable stacking and tracking")
    Note("")
    AnsiNote(b_red .. "shipstacker locatenext"..b_white..":   Locates the first unowned ship")
    AnsiNote(b_red .. "shipstacker deletenext"..b_white..":   Deletes the first unowned ship")
    AnsiNote(b_red .. "shipstacker locateoldest"..b_white..": Locates the oldest located ship")
    Note("")
    AnsiNote(b_red .. "shipstacker db <option>"..b_white..":  Ship database functions")
    AnsiNote(b_white.."      "..b_green.."Lookup"..b_white..": owner <name>, name <ship name>")
    AnsiNote(b_white.."      "..b_green.."Filter"..b_white..": planet <planet>, unowned, owned, list "..b_green.."(shows all ships)")
    AnsiNote(b_white.."      "..b_green.."Sort"..b_white..":   bytype, bydate")
    AnsiNote(b_white.."      "..b_green.."Remove"..b_white..": delete <ship name>, delbyid <ID>")
    Note("")
    AnsiNote(b_red .. "logships"..b_white..":       Log all the ships in the room into the database")
    AnsiNote(b_green.."     Note: This is only useful for Corellia's three main pads.")
    AnsiNote(b_green.."----------------------------------------------------------------------")
end

function detailedHelp()
    AnsiNote(b_green.."----------------------------------------------------------------------")
    AnsiNote(b_white.."              Galaban's Ship Stacker and Tracker")
    AnsiNote(b_white.."This plugin will take the ships on the pad and stack them, making the")
    AnsiNote(b_white.."landing pads far more readable.  There are a few different formats to")
    AnsiNote(b_white.."use for this stacking. Each successive format reduces the amount of")
    AnsiNote(b_white.."information displayed. Formats 0 and 1 are nearly standard output. ")
    Note("")
    AnsiNote(b_white.."In addition to stacking the ships, it also tracks which ships are on")
    AnsiNote(b_white.."which pads.  This also tracks the owners of the ships and displays the")
    AnsiNote(b_white.."owner in white parentheses next to the ship. ")
    AnsiNote(b_white.."An example would be: "..b_cyan.."Purple Rain "..b_white.."(Galaban)")
    Note("")
    AnsiNote(b_green.."How To Use This Plugin:")
    AnsiNote(b_white.."1: To store these ships, the plugin keeps a list of valid pads.  This")
    AnsiNote(b_white.."is to workaround the poor MSDP implementation in LOTJ.  To make a ")
    AnsiNote(b_white.."pad valid, you must call "..b_green.."locateship"..b_white.." on a ship that is on that pad. This ")
    AnsiNote(b_white.."will add the pad to the valid list of pads.")
    AnsiNote(b_white.."When this happens, you will see: "..b_yellow.."Not storing ships.  Uncertain pad...")
    Note("")
    AnsiNote(b_white.."2: When you first enter a pad, it will not store the ships on the pad.")
    AnsiNote(b_white.."(Due to the poor MSDP implementation.)  You must "..b_green.."look"..b_white.. " at the pad")
    AnsiNote(b_white.."in order to store the ships.  (And be on a 'valid' pad. See #1 above).")
    AnsiNote(b_white.."When this happens, you will see: "..b_yellow.."Not storing ships.  Uncertain pad...")
    Note("")
    AnsiNote(b_white.."3: On "..b_green.."Corellia"..b_white.." you must use "..b_green.."logships".. b_white.." to log the ships on the three")
    AnsiNote(b_white.."main pads.  Again, the MSDP code is the reason.  However, it is the ")
    AnsiNote(b_white.."only solution to this problem. ")
    AnsiNote(b_white.."When this happens, you will see: "..d_yellow.."Not storing ships... use"..b_yellow.." logships"..d_yellow.." to...")
    Note("")
    AnsiNote(b_red.."Make sure"..b_white.." to wait half a second or so before logging the ships on the")
    AnsiNote(b_white.."pad. Otherwise, it will cause considerable performance and ships ")
    AnsiNote(b_white.."showing up on the wrong pad.")
    AnsiNote(b_green.."----------------------------------------------------------------------")
end

function formatShipStack(rName, rLine, rWildcards, rStyles)
    local opt = string.sub(rWildcards[2], 1, 1)
    local option = string.lower(rWildcards[2])
    local dosave = false
    local outCol = b_yellow

    local splitOpts = split(option)

    if (opt == "0" or opt == "1" or opt == "2" or opt == "3" or opt == "4") then
        local iVal = tonumber(opt)
        if (shipstackFormat ~= iVal) then
            dosave = true
            shipstackFormat = iVal
        end
        AnsiNote(outCol.."Ship format set to "..opt)
        if (opt == "0") then AnsiNote(outCol.."Standard Output. But owners will be shown..") end
        if (opt == "1") then AnsiNote(outCol.."One ship per line. Owners will be shown.") end
        if (opt == "2") then AnsiNote(outCol.."Ships names will now be shown along with their type.") end
        if (opt == "3") then AnsiNote(outCol.."Types of ship will now be shown along with their count, but without the names.") end
        if (opt == "4") then AnsiNote(outCol.."Only the total count of ships will be shown.") end
    elseif (option == "enable") then
        if (shipstackEnabled ~= "true") then
            dosave = true
            shipstackEnabled = "true"
        end
        enableShipStacking()
        AnsiNote(b_green.."Galaban's Ship Stacker enabled.")
    elseif (option == "disable") then
        if (shipstackEnabled ~= "false") then
            dosave = true
            shipstackEnabled = "false"
        end
        disableShipStacking()
        AnsiNote(b_red.."Galaban's Ship Stacker disabled.")
    elseif (option == "locatenext") then
        LocateUnowned()
    elseif (option == "deletenext") then
        DeleteUnowned()
    elseif (option == "locateoldest") then
        LocateOldest()
    elseif (splitOpts[1] == "db") then
        if (splitOpts[2] == "delete") then
            DropShip(splitOpts[3])
		elseif(splitOpts[2] == "delbyid") then
			DropShipbyID(splitOpts[3])
        else
            --unowned, owner <name>, bytype, name <ship name>
            DumpShips(splitOpts[2], splitOpts[3])
        end
    elseif (option == "pads" or option == "pad") then
        DumpPads()
    elseif (option == "help") then
        detailedHelp()
    else
        AnsiNote(outCol.."Unknown Option..")
        Note("")
        helpShipStack()
    end

    -- Finally, if we made changes, Save the state
    if (dosave) then
        OnPluginSaveState()
    end
end

function manualStoreShips()
    GivePermission()
    Send("look")
end

function LocateUnowned()
    local nextUnowned = nil
    nextUnowned = LookupNextUnownedShip()
    if (nextUnowned == nil) then
        AnsiNote(b_yellow.."No unowned ships found in the database.")
        return
    end
    Note("")
    AnsiNote(b_white.."Locating Ship: "..b_green..nextUnowned)
    Send("locateship "..nextUnowned)
end

function DeleteUnowned()
    local nextUnowned = nil
    nextUnowned = LookupNextUnownedShip()
    if (nextUnowned == nil) then
        AnsiNote(b_yellow.."No unowned ships found in the database.")
        return
    end
    Note("")
    AnsiNote(b_white.."Dropping Ship: "..b_green..nextUnowned)
    DropShip(nextUnowned)
end

function LocateOldest()
    local nextUnowned = nil
    nextUnowned = LookupOldestShip()
    if (nextUnowned == nil) then
        AnsiNote(b_yellow.."No ships found in the database.")
        return
    end
    Note("")
    AnsiNote(b_white.."Locating Ship: "..b_green..nextUnowned)
    if isFirstLookup == true then
        local row = firstRowQueryDB("SELECT * FROM ships WHERE last_lookup IS NOT NULL ORDER BY last_lookup")
        local nextLookup = ""
        nextLookup = tostring(row.name)
        isFirstLookup = false
        Execute("shipstacker db name "..nextLookup)
    end
    Note("")
    Send("locateship "..nextUnowned)
end

-----------------------------
--  Trigger Handlers
local amScanning = false

function obviousExits()

    -- OK, this is far from ideal... but this mud SUCKS with msdp... seriously sucks.
    -- Player will have to enter the room, waith for MSDP to laod then look
    if (amScanning == false) then
        currPadName = trim(strip_colours(getmsdp("ROOMNAME")))
        --debug
        --Note("---[exits]--- Pad Name: "..currPadName)
    end
    
    amScanning = false
    startCapture()
end

function scanning()
    amScanning = true
    startCapture()
    -- We have to make sure to not include this in StartCapture() because
    --  we need to only look for the exit if we hit this trigger.
    EnableTriggerGroup("scanPad",true)
end

function outShipWindow()
    -- Out the window is like scanning because we see the room name.
    scanning()
end

--  Empty line
function stopGrabbing()
    EnableTriggerGroup("captureTriggers",false)
    EnableTriggerGroup("endCaptures",false)

    storeAllShips()
    displayShips()

    -- OK, we're no longer scanning, clearly.
    amScanning = false
end

function stopGrabbingNoShip(rName, rLine, rWildcards, rStyles)
    storeAllShips()
    displayShips()

    -- If we are scanning, the next room over may have more ships. (triggers will stop it if not)
    -- If we are not scanning, we need to stop looking for ships
    if (amScanning) then         
        startCapture() 
        -- If we are scanning, this function overrides GrabPadName, so pass it on.
        scanGrabPadName(rname, rLine, rWildcards, rStyles)
    else
        stopGrabbing()
    end

    AnsiNote(stylesToANSI(rStyles))
end


function scanGrabPadName(rName, rLine, rWildcards, rStyles)
    --Note("--------[scanning/window] PAD NAME--:"..rLine) --debug

    --If we hit this, it's because we were scanning and hit a non-ship line.
    -- So, carry through the fact that we are still scanning (for display purposes.)
    amScanning = true

    currPadName = trim(strip_colours(rLine))
    EnableTriggerGroup("scanPad",false)
end

-----------------------------
--  Ship Processing Functions

function startCapture()
    clearList()

    EnableTriggerGroup("captureTriggers",true)
    EnableTrigger("endCaptureNewLine",true)
end


function addShip(shipType, shipName, extraText)

    if (shipList[shipType] == nil) then shipList[shipType] = {} end
    if (shipList[shipType][shipName] == nil) then
        if (extraText == nil) then extraText = "" end -- sanity
        shipList[shipType][shipName] = extraText
        countShips = countShips + 1
    end
end

function parseShip(startIndex, triggeredLine)
    local tempstr = triggeredLine
    local ind = startIndex
    local fullstr = tempstr:gsub("Miy'til", "Miytil") -- Handling fucking Miy'til fighters with brute force. Fuck that fighter.
    local len = string.len(fullstr)
    if (len < 5) then
       return
    end
    --  Loop through each character and look for the quote.  
    --  Once we find it, to the left is the ship type, to the right is the name
    local loop = true
    local found = false
    local typeIndex = ind
    local nameIndex = ind+1
    while loop do
        ind = ind + 1
        if (ind >= len) then
            loop = false
        end
        if (fullstr:sub(ind, ind) == "'") then
            if( found == true) then
                loop = false
                nameIndex = ind
            else
                found = true
                typeIndex = ind
            end
        end
    end
    
    tempType = trim(fullstr:sub(startIndex, typeIndex-1))
    shipName = fullstr:sub(typeIndex+1, nameIndex-1)
    shipType = tempType:gsub("Miytil", "Miy'til")

    local shipFlag = ""
    if (shipType:sub(1,1) == "[") then
        local endIndx = string.find(shipType, "]")
        shipFlag = shipType:sub(0,endIndx)
        shipType = shipType:sub(endIndx+1)
        shipType = trim(shipType)
    end

    return shipType, shipName, shipFlag, ind+1
end


--  Parse single ship in a text line
function grabShip(triggeredLine)

    EnableTrigger("endCaptureNoShip",true)

    --Check to see if we hit a rare condition where (A) a cyan colored mob 
    --(B) asks or tells us something (C) directly after the room inventory without a line break
    -- (Yes, this happens)  However, only worry about "says" or "asks".  
    if (string.find(triggeredLine, " says") or string.find(triggeredLine, " asks")) then
        return
    end

    local shipType = ""
    local shipName = ""
    
    shipType, shipName, launchFlag = parseShip(0, triggeredLine)
    addShip(shipType, shipName, launchFlag)

end

-- Parse 2 ships in a text line.
function grabShips(triggeredLine)
    EnableTrigger("endCaptureNoShip",true)

    --Note("--"..triggeredLine)

    local shipType = ""
    local shipName = ""
    local ind = 0
    
    -- ship 1
    shipType, shipName, launchFlag, ind = parseShip(0, triggeredLine)
    addShip(shipType, shipName, launchFlag)

    -- ship 2
    shipType, shipName, launchFlag, ind = parseShip(ind, triggeredLine)
    addShip(shipType, shipName, launchFlag)

end

--  In space, this is for ownership
function shipInSpace(rName, rLine, rWildcards, rStyles)
    local shipType = ""
    local shipName = ""
    shipType, shipName = parseShip(0, rLine)

    local owner = getOwner(shipName)

    if (owner ~= nil) then
        AnsiNote(stylesToANSI(rStyles)..b_white.." ("..owner..")")
    else
        AnsiNote(stylesToANSI(rStyles))
        --AnsiNote(stylesToANSI(rStyles))
    end

end

-----------------------------
--  Ship Display Functions

function displayShips()
    if (shipstackEnabled == "false") then
        return
    end

    if (shipstackFormat == 0) then
        stackShipsFormatOriginal(false)
    elseif (shipstackFormat == 1) then
        stackShipsFormatOriginal(true)
    elseif (shipstackFormat == 2) then
        stackShipsFormat1()
    elseif (shipstackFormat == 3) then
        stackShipsFormat2()
    elseif (shipstackFormat == 4) then
        stackShipsFormat3()
    end

    -- since we've displayed them, clear them out now.
    clearList()
end

function stackShipsFormatOriginal(oneperline)
    local firstInLine = true
    local currList = ""

    local function itwrap(vm, i)
        retval = iter(vm, i)
        if not retval then
         return nil --complete the iterator
        end
        return retval
    end

    for shipType,v in spairs(shipList) do
        for shipName, shipFlag in spairs(shipList[shipType]) do
            if (shipFlag ~= "") then
                currList = currList .. " " .. b_red..shipFlag
            end
            currList = currList .. b_cyan.. shipType
            currList = currList .. b_cyan.. " '"..shipName.."'"
            local owner = getOwner(shipName)
            if (owner ~= nil) then
                currList = currList .. " " .. b_white.."("..owner..")"
            end

            if (firstInLine == true and oneperline == false) then
                firstInLine = false
                currList = currList .. "  "
            else
                AnsiNote(currList)
                firstInLine = true
                currList = ""
            end
        end
    end
    if (currList ~= "") then
        AnsiNote(currList)
    end
end

function stackShipsFormat1()
    if (countShips > 0) then
        AnsiNote(d_yellow.."You see "..countShips.." ships here:")
    end

    local maxLen  = 0
    for shipType,v in spairs(shipList) do
        local thisLen = string.len(shipType)
        if (thisLen > maxLen) then maxLen = thisLen end
    end

    maxLen = maxLen + 4  --3 for []: and 1 spaces
    local strFormat = "%-"..maxLen.."s"

    for shipType,v in spairs(shipList) do
        local currList = d_cyan..string.format(strFormat,"["..shipType.."]:")

        local firstItem = true
        resetColor()
        for shipName, shipFlag in spairs(shipList[shipType]) do
            if (firstItem) then 
                firstItem = false 
            else
                currList = currList .. ","
            end
            currList = currList .. " " .. nextColor()..shipName
            if (shipFlag ~= "") then
                currList = currList .. " " .. b_red..shipFlag
            end
            local owner = getOwner(shipName)
            if (owner ~= nil) then
                currList = currList .. " " .. ownerColor().."("..owner..")"
            end
        end
        AnsiNote(currList)
    end
end

function stackShipsFormat2()
    local firstItem = true

    if (countShips > 0) then
        AnsiNote(d_yellow.."You see "..countShips.." ships here:")
    end

    local currList = d_yellow
    for shipType,v in spairs(shipList) do
        if (firstItem) then 
            firstItem = false 
        else
            currList = currList .. ", "
        end

        currList = currList .. shipType
        
        local count = 0
        for j,w in pairs(shipList[shipType]) do 
            count = count + 1 
        end
        if (count > 1) then
            currList = currList .. " (x"..count..")"
        end
    end
    AnsiNote(currList)
end

function stackShipsFormat3()
    if (countShips > 0) then
        AnsiNote(d_yellow.."You see "..countShips.." ships here.")
    end
end


-----------------------------
--  Ship Location Functions
local dataName = nil
local dataType = nil
local dataOwner = nil
local dataPad = nil
local dataPlanet = nil

function startLocationCapture()
    dataName = nil
    dataType = nil
    dataOwner = nil
    dataPad = nil
    dataPlanet = nil

    EnableTriggerGroup("locationCaptures",true)
	locateAttempt = 1
	if isAutoLocating == true then
		DoAfterSpecial(1,"continueLocate()", 12)
        isFirstLookup = true
	end
end

function shipDataName(fullNameAndType)
    dataType, dataName = parseShip(0,fullNameAndType)
end

function shipDataOwner(owner)
    --Access the cache directly. We don't want to hit the DB
    shipOwnerList[dataName] = owner
    dataOwner = owner
end

function shipDataPad(pad)
    dataPad = pad
end

function shipDataPlanet(planet)
    dataPlanet = planet
    EnableTriggerGroup("locationCaptures",false)
    StoreShipFromLookup(dataType, dataName, dataOwner, dataPlanet, dataPad, playerName)
end

-----------------------------
--  Pad storage permission
--  Some pads we want to avoid due to their buggy nature
--  (i.e. being right next to another pad)
function GivePermission()
    SetVariable("tmpVarAllow","1")
end

function HavePermission()
    local val = GetVariable("tmpVarAllow")
    DeleteVariable("tmpVarAllow")
    
    if (val == nil) then
        if(currPadName == "Alpha Landing Pad [Coronet City, Corellia]" or
           currPadName == "Beta Landing Pad [Coronet City, Corellia]" or
           currPadName == "Gamma Landing Pad [Coronet City, Corellia]") then
            return false
        end
    end
    return true
end


-----------------------------
-- Ship Storage Functions
function validateAndLoadPad()
    currPlanet = LookupPlanetByPad(currPadName)
    if (currPlanet ~= nil and currPlanet ~= "") then
        return true
    end
    return false
end

function storeAllShips()
    if (countShips == 0) then return end

    if(HavePermission() == false) then
        AnsiNote(d_yellow.."Not storing ships... use "..b_yellow.."logships "..d_yellow.. " to log them in the database.")
        return
    end
    if (validateAndLoadPad() == false) then
        AnsiNote(b_yellow.."Not storing ships.  Uncertain pad: "..currPadName)
        return
    end
    AnsiNote(d_yellow.."Storing ships found on pad...")

    -- We use the cache functionality to determine which to store to the DB and which to avoid storing.
    processShipCache(currPadName)
end

-----------------------------
--  Cache Functions
function loadOwnerCacheFromDB()
    for row in iterQueryDB("SELECT * FROM ships WHERE owner IS NOT NULL") do
        if (row.owner ~= "") then   --sanity
            shipOwnerList[row.name] = row.owner
        end
    end
end

function getOwner(ship)

    if (shipOwnerList[ship] == nil or shipOwnerList[ship] == "") then
        return nil
    end
    return shipOwnerList[ship]
end

function loadPadCacheFromDB()    
    for row in iterQueryDB("SELECT * FROM pads") do
        padList[row.name] = row.planet
    end
end

local fullCacheLoaded = false
function loadShipCacheFromDB()
    if (fullCacheLoaded == true) then
        return
    end
    fullCacheLoaded = true
    local startTime = os.clock()
    local countItems = 0
    for row in iterQueryDB("SELECT name, last_pad FROM ships") do
        padList[row.name] = row.planet
        addShipToCache(row.last_pad, row.name)
        countItems = countItems + 1
    end
    local duration = os.clock() - startTime
end

function processShipCache(pad)

    local updateList = {}
    --  Ok, so two sides of this story.
    --  I:  Find all NEW ships and add them
    --  II: Delete all OLD ships from the cache

    --  To accomplish this, we go through and mark the cache as NOT FOUND
    if (cacheShipList[pad] ~= nil) then 
        for shipName,w in pairs(cacheShipList[pad]) do
            cacheShipList[pad][shipName] = false
        end
    else
        cacheShipList[pad] = {}
    end

    --  Then sort through the list of ships, either marking them as found
    --  or adding them to the cache/DB (which also marks them as found)
    for shipType,v in pairs(shipList) do
        for shipName,w in spairs(shipList[shipType]) do
            if (cacheShipList[pad][shipName] == nil) then
                StoreShipFromPad(shipType, shipName, currPlanet, currPadName)
            else
                cacheShipList[pad][shipName] = true
                updateList[shipName] = true
            end
        end
    end

    --  Finally, cycle through the list one more time and drop all not found
    for shipName,w in pairs(cacheShipList[pad]) do
        if (cacheShipList[pad][shipName] == false) then
            cacheShipList[pad][shipName] = nil
        end
    end

    -- However, since we did see these ships, go ahead and issue an update on the last_seen time
    UpdateShipsLastSeen(updateList)

end


function addShipToCache(pad, shipName)
    if(cacheShipList[pad] == nil) then cacheShipList[pad] = {} end
    cacheShipList[pad][shipName] = true
end


-----------------------------
--  Database Utility Functions
local db
function openDB()
    local currentCharacter = trim(strip_colours(getmsdp("CHARACTERNAME")))
    if (dbIsOpen ~= true) then
        local dbfile = GetInfo (66) .. sanitize_filename(WorldName()) .. "_ships_"..currentCharacter..".db"

        db = assert (sqlite3.open(dbfile))
        dbIsOpen = true
    end
end

function closeDB()
    if (dbIsOpen) then
        db:close()
    end
    dbIsOpen = false
end


function DatabaseExecute(query)
    openDB()

    db:exec("BEGIN TRANSACTION")

    local code = db:exec(query)

    if code ~= sqlite3.OK and     -- no error
        code ~= sqlite3.ROW and   -- completed OK with another row of data
        code ~= sqlite3.DONE then -- completed OK, no more rows
            local err = db:errmsg ()  -- the rollback will change the error message
            err = err.."\nCODE: "..code.."\nQUERY: "..query.."\n"
            db:exec ("ROLLBACK")      -- rollback any transaction to unlock the database
            AnsiNote(b_red.."SQL Error.")
            AnsiNote(b_red..err)
            return false
    end

    db:exec("COMMIT")

    return true

end

function iterQueryDB(query)
    openDB()
    iter,vm,i = db:nrows(query)
    
    local function itwrap(vm, i)
        retval = iter(vm, i)
        if not retval then
         return nil --complete the iterator
        end
        return retval
    end
    return itwrap,vm,i
end

function firstRowQueryDB(query)
    for row in iterQueryDB(query) do
        return row
    end
    return nil
end

function sanitize_filename(str)
   str = string.gsub(str, "[^%w%s()_-%.]", "")
   return Trim(str)
end

function quoteSQL (s)
   if s then
      return "'" .. (string.gsub (s, "'", "''")) .. "'" -- replace single quotes with two lots of single quotes
   else
      return "NULL"
   end -- if
end

function nullSQL (s)
    if (s) then
        return s
    else
        return "NULL"
    end
end

-----------------------------
--  Database Code
function InitializeDatabase()
	openDB()

	status = DatabaseExecute([[
	CREATE TABLE IF NOT EXISTS ships (
		id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
		name TEXT NOT NULL,
		type TEXT,
		owner TEXT,
		last_planet TEXT,
		last_pad TEXT,
		last_seen TEXT,
		last_lookup TEXT,
		UNIQUE (id)
		);
		]])

	status = DatabaseExecute([[
	CREATE TABLE IF NOT EXISTS pads (
		id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
		name TEXT NOT NULL,
		planet TEXT NOT NULL,
		UNIQUE (id)
		);
		]])

    return status
end


function StoreShipFromLookup(type, name, owner, planet, pad)
    if (planet ~= "(Unknown)" and pad ~= "(Unknown)") then
        StorePad(trim(pad), trim(planet)) -- A verified pad, store it now
    end
    StoreShip(type, name, owner, planet, pad, nil, os.time())
end

function StoreShipFromPad(type, name, planet, pad)
    StoreShip(type, name, nil, planet, pad, os.time(), nil)
end

function StoreShip(type, name, owner, planet, pad, last_seen, last_lookup)
    -- 0: cache it
    addShipToCache(pad, name)

    -- 1: Find the current row
    local row = firstRowQueryDB(string.format("SELECT * FROM ships WHERE name = %s", quoteSQL(name)))

    local sOwner = owner
    local sLookup = last_lookup
    local idField = ""
    local idVal = ""
    if (row ~= nil) then
        idField = "id,"
        idVal = row.id.. ","
        sOwner = owner or row.owner
        sLookup = last_lookup or row.last_lookup
    end
    -- last_seen parameter acts as an override if it's not null.  If null, make sure it gets populated.
    -- always, always have a last_seen value.
    if (last_seen == nil and row == nil) then
        last_seen = os.time()
    elseif (last_seen == nil) then
        last_seen = row.last_seen
    end

    -- 2: Build the query
    local sql = string.format([[
        INSERT OR REPLACE INTO 
        ships  (%s name, type, owner, last_planet, last_pad, last_seen, last_lookup)
        VALUES(%s %s, %s, %s, %s, %s, %s, %s);]], 
        idField, idVal,
        quoteSQL(name), quoteSQL(type), quoteSQL(sOwner), quoteSQL(planet), quoteSQL(pad), nullSQL(last_seen), nullSQL(sLookup))

    -- 3: Execute
    DatabaseExecute(sql)
end

function UpdateShipsLastSeen(updateList)
    local updateString = ""
    local first = true
    -- Yeah, there's some string.concatenate function... 
    -- But this is My United States of Whatever.
    for item,v in pairs(updateList) do
        if (first) then
            first = false
        else
            updateString = updateString..", "
        end
        updateString = updateString..quoteSQL(item)
    end
    -- nothing? bail.
    if (first == true) then
        return
    end

    local sql = string.format([[
        UPDATE ships SET last_seen = %s
        WHERE name IN (%s)]],
        os.time(), updateString)

    DatabaseExecute(sql)

    return
end

function StorePad(name, planet)
    local padName = name
    --Oh, already there... bail.
    for row in iterQueryDB(string.format("SELECT * FROM pads WHERE name = %s", quoteSQL(padName))) do
        return
    end

    if (DatabaseExecute(string.format([[
        INSERT OR REPLACE INTO 
        pads (name, planet)
        VALUES(%s, %s);]], 
        quoteSQL(name), quoteSQL(planet)))
    )then
        Note("")
        AnsiNote(d_yellow.."Pad added to list of valid pads.")
        Note("")
        padList[name] = planet
    end
end

function LookupPlanetByPad(pad)
    local padName = pad

    if (padList[padName] ~= nil and padList[padName] ~= "") then
        return padList[padName]
    end

    local sql = string.format("SELECT * FROM pads WHERE name = %s", quoteSQL(padName))
    for row in iterQueryDB(sql) do
        --Odd, it wasn't in our cache.  Oh well, reload it
        padList[padName] = row.planet
        return row.planet
    end
    return nil
end

function LookupNextUnownedShip()
    local row = firstRowQueryDB("SELECT * FROM ships WHERE owner IS NULL ORDER BY name")

    if (row == nil) then
        return nil 
    else
        shipname = tostring(row.type).." '"..tostring(row.name).."'"
    end
        
    return shipname
end

function LookupOldestShip()
    local row = firstRowQueryDB("SELECT * FROM ships WHERE last_lookup IS NOT NULL ORDER BY last_lookup")
    local shipname = ""
    
    if (row == nil) then
        return nil 
    else
        shipname = tostring(row.type).." '"..tostring(row.name).."'"
    end
        
    return shipname
end

function DropShipbyID(id)
    if (id == nil or id == "") then
        AnsiNote(b_red.."No ship specified to delete")
        AnsiNote(b_white.."Format:  shiptracker db delete <ship id>")
        Note("")
        return
    end
    local wasgood = DatabaseExecute(string.format("DELETE FROM ships WHERE id=%s", quoteSQL(id)))

    if (wasgood) then
        AnsiNote(b_yellow.."Ship deletion executed.")
    end
    return
end

function DropShip(name)
    if (name == nil or name == "") then
        AnsiNote(b_red.."No ship specified to delete")
        AnsiNote(b_white.."Format:  shiptracker db delete <ship name>")
        Note("")
        return
    end
    local wasgood = DatabaseExecute(string.format("DELETE FROM ships WHERE name LIKE %s", quoteSQL(name)))

    if (wasgood) then
        AnsiNote(b_yellow.."Ship deletion executed.")
    end
    return
end

function DumpShips(option, filter)
    --unowned, owner <name>, bytype, name <ship name>
    local found = false

    if (option == "name" or option == "owner" or option == "planet") then
        if (filter == nil or filter == "") then
            AnsiNote(b_red.."No filter specified for option...")
            AnsiNote(b_white.."Format:  shiptracker db "..option.. " <"..option..">")
            Note("")
            return
        end
    end

    local sql = "SELECT * FROM ships "
    local sort = "ORDER BY name"
    local where = ""

    if(option == "unowned") then
        where = " WHERE owner IS NULL "
    elseif(option == "owned") then
        where = " WHERE owner IS NOT NULL "
    elseif (option == "owner") then
        where = " WHERE owner LIKE " .. quoteSQL(filter)
    elseif (option == "planet") then
        where = " WHERE last_planet LIKE " .. quoteSQL(filter)
    elseif (option == "bytype") then
        sort = " ORDER BY type"
    elseif (option == "bydate") then
        sort = " ORDER BY last_seen"
    elseif (option == "name") then
        where = " WHERE name LIKE " .. quoteSQL(filter)
    elseif (option ~= "list" and option ~= "dump") then
            AnsiNote(b_red.."Invalid option specified")
            AnsiNote(b_white.."Valid DB Commands:")
            AnsiNote(b_green.."   Lookup:")
            AnsiNote(b_white.."   shipstacker db owner <owner>")
            AnsiNote(b_white.."   shipstacker db name <ship name>")
            AnsiNote(b_white.."   shipstacker db planet <planet>")
            AnsiNote(b_green.."   Filter:")
            AnsiNote(b_white.."   shipstacker db unowned")
            AnsiNote(b_white.."   shipstacker db unowned")
            AnsiNote(b_white.."   shipstacker db list "..b_green.. "(no filter, sorted by name)")
            AnsiNote(b_green.."   Sort:")
            AnsiNote(b_white.."   shipstacker db bytype")
            AnsiNote(b_white.."   shipstacker db bydate")
            AnsiNote(b_green.."   Delete Ship:")
            AnsiNote(b_white.."   shipstacker db delete <ship name>")
            Note("")
            return
    end

    sql = sql .. where .. sort
    for row in iterQueryDB(sql) do
        if (found == false) then
            found = true
            AnsiNote(d_white.."ID  Ship Name        Type                             Owner     Last Seen           Location")
        end

        local outStr = d_white..string.format("%-4s", row.id)
		outStr = outStr.. b_cyan..string.format("%-17s",row.name)
        outStr = outStr.. d_cyan..string.format("%-33s",row.type)
        outStr = outStr.. b_green..string.format("%-10s",row.owner or "")  --possibly null
        outStr = outStr.. d_white..string.format("%-20s",os.date('%Y-%m-%d %H:%M:%S',row.last_seen))
        outStr = outStr.. string.format("%-20s",row.last_planet .. ": " ..row.last_pad)
        AnsiNote(d_white..outStr)
    end

    if (found == false) then
        AnsiNote(b_white.."No ships found in the database.")
    end

    Note("")
end

function DumpPads()
        local found = false

    for row in iterQueryDB("SELECT * FROM pads ORDER BY planet") do
        if (found == false) then
            found = true
            AnsiNote(d_white.."Planet         Pad Name")
        end

        local outStr = string.format("%-15s",row.planet)
        outStr = outStr.. row.name
        AnsiNote(d_white..outStr)
    end

    if (found == false) then
        AnsiNote(b_white.."No ships found in the database yet.")
    end
end

Note("[Galabans Ship Stacker-Tracker plugin loaded.]")

]]>
</script>


<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="Galabans_Ship_StackerTracker:help"
   enabled="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[
function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end
]]>
</script> 

</muclient>
