<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, April 23, 2010, 1:43 AM -->
<!-- MuClient version 4.40 -->

<!-- Plugin "LotjAutoTeach" generated by Plugin Wizard -->

<muclient>
<plugin
   name="LotjAutoTeach"
   author="@Ilyena"
   id="a2f8b0c817498de22da26c52"
   language="Lua"
   purpose="Makes teaching a lot quicker"
   save_state="y"
   date_written="2010-04-23 01:42:37"
   requires="4.40"
   version="1.0"
   >
<description trim="y">
<![CDATA[
'teachhelp' for commands
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   group="Teaching"
   match="^You attempt to explain the concept to (.*)\, but fail miserably\.\.\.$"
   name="FailTeach"
   regexp="y"
   script="TeachSkill"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="Teaching"
   match="^You teach (.*)\, raising (.*)$"
   name="TeachSuccess"
   regexp="y"
   script="IncrementSkillList"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="Teaching"
   match="^(.*) must practice that on their own\.$"
   name="AlreadyKnowTrig"
   regexp="y"
   script="IncrementSkillList"
   sequence="100"
  >
  </trigger>
  <trigger
	enabled="y"
	group="Teaching"
	match="You must perfect that yourself before teaching others."
	name="NotYetLearned"
	regexp="n"
	script="IncrementSkillList"
	sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="Teaching"
   match="^(.*) isn\'t ready to learn that yet\.$"
   name="NotReadyTrig"
   regexp="y"
   script="IncrementSkillList"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="Teaching"
   match="^(.*) offers to teach you (.*)\.$"
   name="TeachResponse"
   regexp="y"
   script="TeachAccept"
   sequence="100"
  >
  </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   name="TeachAddItem"
   script="AddItemToList"
   match="teachadd *"
   enabled="y"
   group="Teaching"
   sequence="100"
  >
  </alias>
  <alias
   name="TargetAlias"
   script="SetTeachTarget"
   match="teachtarget *"
   enabled="y"
   group="Teaching"
   sequence="100"
  >
  </alias>
  <alias
   name="ToggleAuto"
   script="SetTeachAutoAccept"
   match="teachauto"
   enabled="y"
   group="Teaching"
   sequence="100"
  >
  </alias>
  <alias
   name="StopTeaching"
   script="TeachStop"
   match="teachstop"
   enabled="y"
   group="Teaching"
   send_to="12"
   sequence="100"
  >
  <send>ClearTeachList()</send>
  </alias>
  <alias
   name="ToggleAutoAccept"
   script="SetTeachAutoAccept"
   match="teachauto *"
   enabled="y"
   group="Teaching"
   sequence="100"
  >
  </alias>
  <alias
   name="ShowTeachingInfo"
   script="ShowTeachTarget"
   match="teachshow"
   enabled="y"
   group="Teaching"
   sequence="100"
  >
  </alias>
  <alias
   name="TeachListClear"
   script="ClearTeachList"
   match="teachclear"
   enabled="y"
   group="Teaching"
   sequence="100"
  >
  </alias>
  <alias
   name="AddSciencesToList"
   script="AddSciencesToList"
   match="teachscience"
   enabled="y"
   group="Teaching"
   sequence="100"
  >
  </alias>
  <alias
   name="TeachBegin"
   script="TeachSkill"
   match="teach"
   enabled="y"
   group="Teaching"
   sequence="100"
  >
  </alias>
  <alias
   name="TeachingShowList"
   script="ShowTeachList"
   match="teachlist"
   enabled="y"
   group="Teaching"
   sequence="100"
  >
  </alias>
  <alias
   name="ShowTeachHelp"
   script="ShowCommands"
   match="teachhelp"
   enabled="y"
   group="Teaching"
   sequence="100"
  >
  </alias>
</aliases>

<!--  Variables  -->

<variables>
  <variable name="teachautoaccept">neutral</variable>
</variables>

<!--  Script  -->


<script>
<![CDATA[
scienceList = {"advanced electronics", "chemistry", "construction", "data", "destruction", "edibles", "education", "electronics","enhancement","equipment","forensics","guidance","machines","medical","minerals","narcotics","spacecraft", "study", "transportation"}
teachList = {}
teachTarget = ""
teachFinished = true
scienceListPosition = 1


function AddItemToList(name, line, wildcards)
	if (wildcards[1] ~= nil) then
		if (#teachList == 0) then
			table.insert(teachList, 1, wildcards[1]) -- Make first entry
			ColourNote("lime", "black", "- ".. wildcards[1].. " ADDED TO TEACHING LIST")
			teachFinished = false
		else
			table.insert(teachList, wildcards[1]) -- Make subsequent entries
			ColourNote("lime", "black","- ".. wildcards[1].. " ADDED TO TEACHING LIST")
		end -- if
	else
		ColourNote("red","black", "- Not Valid")
	end -- if
end -- function

function AddSciencesToList(name, line, wildcards)
	ColourNote("lime", "black", "- ALL SCIENCES ADDED TO LIST")
	for i, v in ipairs(scienceList) do
		if (#teachList == 0) then
			table.insert(teachList, 1, scienceList[i]) -- Make first entry
			teachFinished = false
		else
			table.insert(teachList, scienceList[i]) -- Make subsequent entries
		end -- if
	end -- for	
end -- function

function ClearTeachList(name, line, wildcards)
	teachList = {}
	ColourNote("red", "black", "- TEACHING LIST CLEARED")
end -- function

function IncrementSkillList(name, line, wildcards)
	table.remove(teachList, 1)
	if(#teachList < 1) then
		ColourNote("red", "black", "- LIST FINISHED")
	else
		TeachSkill()
	end -- if
end -- function

function SetTeachAutoAccept(name, line, wildcards)
-- Auto Accept can either be on, off or in stand by.
-- In off it will autodeny.
-- In on it will autoaccept.
-- In standby it will do nothing.
	if (wildcards[1] ~= nil) then
		if (wildcards[1] == "on") then
			accept = true
			ColourNote("lime", "black", "- Auto Teach Accept Set to Accept")
		elseif(wildcards[1] == "off") then
			accept = false
			ColourNote("red", "black", "- Auto Teach Accept Set to Deny")
		else
			accept = nil
			ColourNote("yellow", "black", "- Auto Teach Accept Set to Standby")
		end -- if
	else
		if (GetVariable("teachautoaccept") == "accept") then
			accept = false
			ColourNote("red", "black", "- Auto Teach Accept Set to Deny")
		elseif(GetVariable("teachautoaccept") == "deny") then
			accept = nil
			ColourNote("yellow", "black", "- Auto Teach Accept Set to Standby")
		elseif(GetVariable("teachautoaccept") == "neutral") then
			accept = true
			ColourNote("lime", "black", "- Auto Teach Accept Set to Accept")
		end -- if
	end -- if
	if (accept == nil) then
		SetVariable("teachautoaccept", "neutral")
	else
		if (accept == true) then
			SetVariable("teachautoaccept", "accept")
		else
			SetVariable("teachautoaccept", "deny")
		end -- if
	end -- if
end -- function

function SetTeachTarget(name, line, wildcards)
	if (wildcards[1] ~= nil) then
		teachTarget = wildcards[1]
		Note("- TEACHING TARGET SET TO ".. teachTarget)
	end -- if
end -- function

function ShowTeachList(name, line, wildcards)
	ColourNote("grey", "black","- THE TEACHING QUEUE CONTAINS: ")
	for i, v in ipairs(teachList) do
		ColourNote("grey", "black",v)
	end -- for
end -- function

function ShowTeachTarget(name, line, wildcards)
	if (teachTarget ~= nil) then
		ColourNote("grey", "black", "- TEACHING TARGET IS: ".. teachTarget)
	end -- if
end -- function

function TeachAccept(name, line, wildcards)
	if(GetVariable("teachautoaccept") == "accept") then
		Send("teach accept")
	elseif(GetVariable("teachautoaccept") == "deny") then
		Send("teach deny")
	end -- if
end -- function

function TeachSkill(name, line, wildcards)
	if (teachTarget ~= "") then
		if (#teachList > 0) then
			Send("teach ".. teachTarget.. " ".. teachList[1])
		else
			ColourNote("red", "black", "- TEACHING LIST EMPTY")
		end -- if
	else
		ColourNote("red", "black", "- NO TARGET SPECIFIED")
	end -- if
end -- function



function TeachStart(name, line, wildcards)
	EnableTrigger("AlreadyKnowTrig", true)
	EnableTrigger("NotReadyTrig", true)
	EnableTrigger("TeachSuccess", true)
	EnableTrigger("FailTeach", true)
	ColourNote("lime", "black", "- AUTOTEACHING ENABLED")
end -- function

function TeachStop(name, line, wildcards)
	EnableTrigger("AlreadyKnowTrig", false)
	EnableTrigger("NotReadyTrig", false)
	EnableTrigger("TeachSuccess", false)
	EnableTrigger("FailTeach", false)
	ColourNote("red", "black", "- AUTOTEACHING DISABLED")
end -- function

function ShowCommands(name, line, wildcards)
	ColourNote("grey", "black", "---AutoTeacher by @Ilyena---")
	ColourNote("grey", "black","'teachtarget #' - Set the target to be taught.")
	ColourNote("grey", "black","'teachshow' - Display which target is to be taught.")
	ColourNote("grey", "black","'teachadd #' - Add an item to the teach queue.")
	ColourNote("grey", "black","'teachlist' - Display the teaching queue.")
	ColourNote("grey", "black","'teachscience' - Adds all the sciences to the teaching queue.")
	ColourNote("grey", "black","'teachclear' - Clear the teach queue.")
	ColourNote("grey", "black","'teachstop' - Stop the teaching queue.")
	ColourNote("grey", "black","'teachauto (on/off/standby)' - Toggle. Set auto accept to accept, deny or standby.")
end -- function
]]>
</script>


<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="LotjAutoTeach:help"
   enabled="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[
function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end
]]>
</script> 

</muclient>
