shipName = ""
exitdirs = {}
entrydirs = {}
hatchCode = 0
shipEnterDirs = ""
shipLeaveDirs = ""
planetName = ""
lastPlanet = ""
autoFly = false
landingSites = {}
landingSiteNum = 0
landgrabbing = false
landPreference = -1
hangars = {}
reentership = false
hypertries = 0


function fighterGrab(args)
  assert(args, "Nil value passed to fighterGrab")
  local squad = hangars[args.hangarname] or {}
  squad[#squad + 1] = args.fightertype.." '"..args.fightername.."'"
  hangars[args.hangarname] = squad
  --tprint(hangars)
end

function fighterShow(args)
  if not args.fightertype or not args.fightername then
    return
  end
  for k, v in ipairs(hangars) do -- scroll through hangars
    for i, j in ipairs(v) do -- scroll through every saved squad ship
      if args.fightertype.." '"..args.fightername.."'" == j then
        DeleteLines(1)
        for a, b in ipairs(styles) do
          cecho(RGBColourToName(b.textcolour), RGBColourToName(b.backcolour), b.text) 
        end 
        cecho("<yellow>-><gray>[","<red>" .. k .. "<gray>]")
      end
    end
  end
end

function fighterClear()
  hangars = {}
  print("Squadron information cleared.")
end
  
function reenterCheck()
  if (reentership == true) then
    enterShip()
  end
end

function setShipName(args)
    shipName = args
    cecho("Current ship set to " .. shipName .. "\n")
    checkSetup()
end

function setHatchCode(args)
    hatchCode = tonumber(args)
    cecho("Hatch code set to " .. hatchCode .. "\n")
    checkSetup()
end

function entryDir(args)
	shipEnterDirs = args
	cecho("Directions to enter the ship set to " .. shipEnterDirs .. "\n")
	if string.find(args, " ") then -- entered n n n format
		entrydirs = string.split(args, " ")
	elseif string.find(args, ",") then -- entered n,n,n format
		entrydirs = string.split(args, ",")
	elseif string.find(args, ";") then -- entered n;n;n format
		entrydirs = string.split(args, ";")
  -- room for expansion here to handle speedwalking syntax 2n3eu etc
	elseif string.lower(args) == "none" then
		cecho("<lawn_green>One room ship specified.")
	elseif args == "" then
		cecho("<tomato>Unrecognized directions given to enter ship, aborting script.\n")
      toggleFlyOff()
      return
   end
   checkSetup()
end

function exitDir(args)
    shipLeaveDirs = args
    cecho("Directions to leave the ship set to " .. shipLeaveDirs .. "\n")
  if string.find(args, " ") then -- entered n n n format
    exitdirs = string.split(args, " ")
  elseif string.find(args, ",") then -- entered n,n,n format
    exitdirs = string.split(args, ",")
  elseif string.find(args, ";") then -- entered n;n;n format
    exitdirs = string.split(args, ";")
  -- room for expansion here to handle speedwalking syntax 2n3eu etc
  elseif string.lower(args) ~= "none" then
    cecho("<red>Unrecognized directions given to leave ship, aborting script.")
    toggleFlyOff()
    return
  end
   checkSetup()
end

function landingPref(args)
    landPreference = tonumber(args)
    cecho("Landing preference set to landing pad " .. landPreference .. "\n")
end

function checkFlightVars()
    if (shipName == "") then
        cecho("<tomato>No ship entered. Please designate ship with 'shipname' alias.\n")
        toggleFlyOff()
    end
    if (hatchCode == -1) then
		cecho("<tomato>No hatch number designated. Please designate hatch number or enter 0 for none with 'hatchcode' alias.\n")
        toggleFlyOff()
    end
    if (shipEnterDirs == "") then
        cecho("<tomato>No ship entrance path designated. Please designate entrance path with 'entrydir' alias.\n")
        toggleFlyOff()
    end
    if (shipLeaveDirs == "") then
		cecho("<tomato>No exit directions designated. Please designate exit directions with 'exitdir' alias.\n")
        toggleFlyOff()
    end
end

function checkSetup()
    if (shipName == "") then
        cecho("<tomato>No ship entered. Please designate ship with 'shipname' alias.\n")
    end
    if (hatchCode == 0) then
		cecho("<yellow_green>No hatch number designated. Currently set to 0. Please designate hatch number with 'hatchcode' alias if needed.\n")
    end
    if (shipEnterDirs == "") then
        cecho("<tomato>No ship entrance path designated. Please designate entrance path with 'entrydir' alias.\n")
    end
    if (shipLeaveDirs == "") then
		cecho("<tomato>No exit directions designated. Please designate exit directions with 'exitdir' alias.\n")
    end
end

function toggleReenter(args)
  if not args or args == "" then -- entered nothing
    if reentership then
      reentership = false
      cecho("<yellow>Will not re-enter ship upon arrival.\n")
    else
      reentership = true
      cecho("<yellow>Will re-enter ship upon arrival.\n")
    end
  elseif string.lower(args) == "on" then
    reentership = true
    cecho("<yellow>Will re-enter ship upon arrival.\n")
  elseif string.lower(args) == "off" then
    reentership = false
    cecho("<yellow>Will not re-enter ship upon arrival.\n")
  end
end

function flyClear()
	shipName = ""
	hatchCode = -1
	shipEnterDirs = ""
	shipLeaveDirs = ""
	planetName = ""
	lastPlanet = ""
	autoFly = false
	landingSites = {}
	landingSiteNum = 0
	landgrabbing = false
	landPreference = -1
	reentership = false
	hypertries = 0
	print("Fly variables cleared.")
	toggleFlyOff()
end

function endFlight()
  checkFlightVars()
  for i, v in ipairs(exitdirs) do
    send(v)
  end
  send("openhatch")
  send("leaveship")
  send("closehatch "..shipName)
  send("refuel " .. shipName .. " full")
  send("ships sale")
  landingSites = {}
  lastPlanet = planetName
  if (reentership == true) then
    enterShip()
  end
  toggleFlyOff()
end

coords = {-50000, 0, 50000}

function waitHyper()
  hypertries = hypertries + 1
  if hypertries >= 10 then
    hypertries = 0
    send("course "..coords[math.random(3)].." "..coords[math.random(3)].." "..coords[math.random(3)])
  end
  tempTimer(10, [[send("hyper")]])
end

function landing()
	send("shields on")
	send("autopilot on")
end	

function endLandGrab()
	if (landgrabbing == false) then
		landgrabbing = true
		print("Grabbing landing sites...")
		landingSiteNum = 0
	else
		landgrabbing = false
      disableTrigger("MatchLine")
      disableTrigger("LandGrabEnd")
		print("Land grab finished.")
		landingSiteNum = 0
		if (tonumber(landPreference) > 0) then
			landArg(landPreference)
		else
			landNext()
		end
	end
end

function landNext()
	landingSiteNum = landingSiteNum + 1
	landArg(landingSiteNum)
end

function landArg(siteNum)
	if (siteNum > #landingSites) then
		print("Error in auto landing sequence, aborting...")
		toggleFlyOff()
		return
	end
	send("land '" .. planetName .. "' " .. landingSites[siteNum])
end

function landGrab(args)
   local squelch = string.find(args, "Possible choices for")
   if (args ~= "" and squelch == nil) then
   landingSites[#landingSites + 1] = string.trim(args)
   end
end

function startLandGrab()
   landingSites = {}
	enableTrigger("MatchLine")
   enableTrigger("LandGrabEnd")
end

function doLand()
	send("land '" .. planetName .. "'")
end


function coursePlanet()
	send("speed 100")
	send("course '" .. planetName .. "'")
end

function calcDone()
  hypertries = 1
	send("hyper")
end

function calcPlanet()
	if (planetName == "") then
		cecho("<tomato>No planet specified. Please designate planet to fly to.\n")
        toggleFlyOff()
	end
	expandAlias("calc " .. planetName, false)
end		

function flightStatus()
	cecho("<gray>Flight status: " .. ((autoFly==true and "<green>Enabled\n") or "<red>Disabled\n"))
	print("  Flying '" .. shipName .. "' \(Hatch code: " .. hatchCode .. "\)\n")
	if (autoFly == true) then
		if (lastPlanet ~= "") then
			cecho("<yellow_green>  Flying from: " .. lastPlanet)
		end
		cecho("<yellow_green>  Destination planet: " .. planetName .. "\n")
	end
    cecho("<gray>Entry Path: " .. shipEnterDirs .. "\n")
    cecho("<gray>Exit Path:  " .. shipLeaveDirs .. "\n")
    print("")
	if (reentership == true) then
	  print("  Will re-enter ship when flight is completed.")
	end
end

function finishFlight(args)
	if (args ~= "") then
		planetName = string.trim(args)
		print("Planet name: '" .. planetName .. "'")
	end
	toggleFlyOn()
	if (shipName == "") then
		cecho("<tomato>No ship entered. Please designate ship with 'shipname' alias.\n")
	end
	if (shipLeaveDirs == "") then
		cecho("<tomato>No exit directions designated. Please designate exit directions with 'exitdir' alias.\n")
	end
	if (landPreference == -1) then
		cecho("<tomato>No landing preference designated. Please designate landing preference with 'landingpref' alias.\n")
	end
end

function beginFlight(args)
    checkFlightVars()
	if (args ~= "") then
		planetName = string.trim(args)
	else
		cecho("<tomato>Please designate planet to fly to.\n")
	end
    send("refuel " .. shipName .. " full")
	enterShip()
	toCockpit()
	send("pilot")
	send("autopilot off")
	send("launch confirm")
	send("shields on")
	print("Flying to: '" .. planetName .. "'")
	toggleFlyOn()
end

function enterShip()
	if (hatchCode < 1) then
		send("openhatch " .. shipName)
	else
		send("openhatch " .. shipName .. " " .. hatchCode)
	end
	send("enter " .. shipName)
	send("closehatch")
end

function toCockpit(name, list, args)
   for i, v in ipairs(entrydirs) do
      send(v)
   end
end

function toggleFlyOn()
	autoFly = true
	enableTrigger("Flight")
	cecho("<green>Auto Flight activated.\n")
end

function toggleFlyOff()
	autoFly = false
	disableTrigger("Flight")
	cecho("<yellow>Auto Flight deactivated.\n")
end

function flyAuto(args)
   if (args == "on") then
      toggleFlyOn()
   else
      if (args == "off") then
         toggleFlyOff()
      else
         if(autoFly == true) then
            toggleFlyOff()
         else
            toggleFlyOn()
         end
      end
   end
end

function flightHelp()
    cecho("<yellow_green>Automatic flight commands:\n")
    cecho("<yellow_green>------------------------------\n")
    cecho("<yellow_green>flyto <planet>      - Begin a flight to given planet, while standing in front of ship\n")
    --print("Flyto prompt        - Begin a new flight, prompting for parameters")
    cecho("<yellow_green>flyfinish <planet>  - Finish a flight already in progress to given planet\n")
    cecho("<yellow_green>flystatus           - Display current status of flight\n")
    cecho("<yellow_green>flyauto on/off      - Enable or disable automatic flight\n")
    cecho("<yellow_green>flyclear            - Clears all current fly variables\n")
    cecho("<yellow_green>flyreenter          - Re-enter your ship at the end of a flight\n")
    cecho("<yellow_green>hatchcode <#>       - Designates the hatch number. 0 for none\n")
    cecho("<yellow_green>entrydir <path>     - Designates the entry path. Can accept 'n n n', 'n,n,n' or 'n;n;n'\n")
    cecho("<yellow_green>exitdir <path>      - Designates the exit path. Can accept 'n n n', 'n,n,n' or 'n;n;n'\n")
    cecho("<yellow_green>landingpref <#>     - Designates the landing preference (top down, 0 for auto.)\n")
    cecho("<yellow_green>shipname <shipname> - Designates the ship's name\n")
    cecho("<yellow_green>flyHelp             - Display this help menu\n")
    cecho("\n")
end

