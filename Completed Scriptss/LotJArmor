armorList = {}
currentPos = 1
autoArmor = false
enhanceList = {}
autoEnhance = false
currentEnh = 1
autoTransition = false
newArmorAuto = false
afk = false
NAList = {}
currentNA = 1
newarmor = {
	material = "",
	wearloc = "",
	cover = "",
	desc = "",
	restring = "",
	underlay = "",
	coating = "",
	keyword = "",
	work = "",
	enhance = ""
	}
bactaCheck = false
previousBacta = 0

function makeArmor()
	if (armorList[currentPos]) then
		send("makearmor ".. armorList[currentPos])
	else
		cecho("<tomato>Armor list empty, aborting!\n")
		toggleArmorOff()
	end
end

function armorStart()
	if (#armorList > 0) then -- we have stuff to make!
		currentPos = 0
		makeNextArmor()
		toggleArmorOn()
	else                     -- nothing to make
		cecho("<tomato>Nothing to make!\n")
		toggleArmorOff()
	end
end

function toggleArmorOn()
	autoArmor = true
	enableTrigger("AutoArmor")
	enableTrigger("AutoAFK")
	cecho("<slate_grey>AutoArmor activated.\n")
end

function toggleArmorOff()
	autoArmor = false
	disableTrigger("AutoArmor")
	disableTrigger("AutoAFK")
	cecho("AutoArmor deactivated.\n")
end

function afkOn()
	afk = true
end

function afkOff()
	afk = false
end

function makeNextArmor()
	currentPos = currentPos + 1
	if (currentPos > #armorList) then  -- reached end of list
		cecho("\n<lawn_green>Armormaking complete.\n")      -- finished
		toggleArmorOff()
	else                                    -- middle of list
		makeArmor()  -- finally, make armor
	end
end

function addArmor(args)
	if not args then
		cecho("<tomato>Invalid arguments given to armoradd. Use format 'armoradd <armor>'.\n")
		return
	end
	armorList[#armorList + 1] = args
	cecho("<lawn_green>'" .. armorList[#armorList] .. "' added to armor list.\n")
end

function removeArmor(args)
   for i, v in ipairs(armorList) do
      if ((v == args) or (i == tonumber(args))) then
         cecho("<lawn_green>Removed '" .. armorList[i] .. "' index(" .. i .. ") from armor list.\n")
         table.remove(armorList, i)
         if (currentPos > i) then  -- if our item is higher in the list than what we remove
         	currentPos = currentPos - 1  -- decrement the pointer to follow the current item
         end
         break
      else
         if (#armorList == i) then
            cecho("<tomato>Unable to find specified item in armor list.\n")
         end
      end
   end
end

function clearArmorList()
	armorList = {}
	cecho("<lawn_green>Armor list cleared.\n")
	currentPos = 0
	toggleArmorOff()
end

function clearAllList()
	clearArmorList()
	clearEnhanceList()
	clearNAList()
end

function resumeArmorFromAFK()
	if (afk) then
		Send("afk")
	end
	send("bot start")
	makeArmor()
end

function displayArmorList(name, line, args)
    cecho("<grey>Armor List Contains: \n")
    for i, v in ipairs(armorList) do
      if (i == currentPos) then
        cecho("<green>--]>"..v.."<[--\n")
      else
        cecho("<grey>" .. v .. "\n")
      end
    end
end

function armorAuto(args)
   if (args == "on") then
      toggleArmorOn()
   else
      if (args == "off") then
         toggleArmorOff()
      else
         if(autoArmor == true) then
            toggleArmorOff()
         else
            toggleArmorOn()
         end
      end
   end
end

function displayAllHelp()
	displayArmorHelp()
	displayEnhanceHelp()
	displayNAHelp()
end

function displayArmorHelp()
   cecho("<grey>Armor Stitching Commands:\n")
   cecho("<grey>------------------------------\n")
   cecho("<grey>Makearmor           - Resume stitching current item in the list\n")
   cecho("<grey>ArmorStart          - Begin automatic stitching session from front of list\n")
   cecho("<grey>ArmorAdd <item>     - Add an item to the automatic stitching list\n")
   cecho("<grey>ArmorRem <item/#>   - Remove an item from stitching list by name or index number\n")
   cecho("<grey>ArmorList           - Display stitching list contents\n")
   cecho("<grey>ArmorNext           - Skip current item in stitching list\n")
   cecho("<grey>ArmorAuto (on/off)  - Turns automatic stitching on or off\n")
   cecho("<grey>BactaCheck (on/off) - Helps display the amount of bacta contained in armor\n")
   cecho("<grey>ArmorClearAll       - Clear all armor related lists and deactivate all armor scripts\n")
   cecho("<grey>ArmorHelp           - Display this command list\n")
   cecho("<grey>ArmorHelpAll        - Display all armor related command lists\n")
   cecho("<grey>\n")
end -- function

function enhanceArmor()
	if (enhanceList[currentEnh][1]) then
		send("enhancearmor " .. enhanceList[currentEnh][1] .. " " .. enhanceList[currentEnh][2])
	else
		cecho("<tomato>Enhance list empty, aborting!\n")
		toggleEnhanceOff()
	end
end

function enhanceStart()
	if (#enhanceList > 0) then  -- we have stuff to enhance
		currentEnh = 0
		enhanceNext()
		toggleEnhanceOn()
	else
		cecho("<tomato>Nothing to enhance!\n")
		toggleEnhanceOff()
	end
end

function enhanceBadItem()
	if (autoArmor) then -- if automatic stitching is activated, remove this item from the stitching list
						-- because we ran into an error with the enhancement and don't want to stitch an
						-- unenhanced piece of gear
		expandAlias("armorrem " .. currentPos)
	end
	enhanceNext() -- move on to next piece to enhance
end
function toggleEnhanceOn(name, line, args)
	autoEnhance = true
	enableTrigger("AutoEnhance")
	enableTrigger("AutoAFK")
	cecho("<lawn_green>AutoEnhance activated.\n")
end

function toggleEnhanceOff(name, list, args)
	autoEnhance = false
	disableTrigger("AutoEnhance")
	disableTrigger("AutoAFK")
	cecho("<tomato>AutoEnhance deactivated.\n")
end

function enhanceNext(name, list, args)
	currentEnh = currentEnh + 1
	if (currentEnh > #enhanceList) then -- reached end of list
		cecho("\n<lawn_green>AutoEnhance complete.\n")   -- finished
		toggleEnhanceOff()
		if (autoTransition == true) then -- if we're automatically switching to makearmor when done
			armorStart()
		end
	else
		enhanceArmor()  -- enhance the armor if we aren't done
	end
end

function addEnhanceItem(item, enhancement)
	if (item == nil or enhancement == nil) then
		cecho("<tomato>Invalid arguments given to enhanceadd. Use format 'enhanceadd <armor> <underlay>'.\n")
		return
	end
	t = #enhanceList -- Find the size of the list
	temp = {}
	table.insert(temp, 1, item)
	table.insert(temp, enhancement)
	if (t == 0) then
		table.insert(enhanceList, 1, temp) -- Make first entry
	else
		table.insert(enhanceList, temp) -- Make subsequent entries
	end
	cecho("<lawn_green>'" .. enhanceList[#enhanceList][1] .. ":" .. enhanceList[#enhanceList][2] .. "' added to enhance list.\n")
end

function clearEnhanceList()
	enhanceList = {}
	cecho("<lawn_green>Enhance list cleared.\n")
	currentPos = 0
	toggleTransitionOff()
	toggleEnhanceOff()
end

function resumeEnhanceFromAFK(name, line, args)
	if (afk) then
		Send("afk")
	end
	Send("bot start")
	enhanceArmor()
end

function displayEnhanceList(name, line, args)
   cecho("<grey>Enhance List Contains: \n")
   for i, v in ipairs(enhanceList) do
    if (i == currentEnh) then
      cecho("<green>--]>"..v[1]..":"..v[2].."<[--\n")
    else
      cecho("<grey>--]>"..v[1]..":"..v[2].."<[--\n")
    end
   end
end

function enhanceAuto(args)
   if (args == "on") then
      toggleEnhanceOn()
   else
      if (args == "off") then
         toggleEnhanceOff()
      else
         if(autoEnhance == true) then
            toggleEnhanceOff()
         else
            toggleEnhanceOn()
         end
      end
   end
end

function displayEnhanceHelp()
   cecho("<grey>Armor Enhancing Commands:")
   cecho("<grey>------------------------------")
   cecho("<grey>Enhance                       - Resume enhancing current item in enhance list")
   cecho("<grey>EnhanceStart                  - Begin new enhancing session from front of list")
   cecho("<grey>EnhanceAdd <armor> <underlay> - Manually add an item to the enhance list")
   cecho("<grey>EnhanceList                   - Display enhance list contents")
   cecho("<grey>EnhanceClear                  - Clear current Enhance list")
   cecho("<grey>EnhanceNext                   - Skip current item in enhance list")
   cecho("<grey>EnhanceAuto (on/off)          - Turns automatic enhancing on or off")
   cecho("<grey>TransitionAuto (on/off)       - Automatically begins stitching when enhance list is finished")
   cecho("<grey>EnhanceHelp                   - Display this command list")
   cecho("<grey>\n")
end -- function

function toggleTransitionOff()
	autoTransition = false
	cecho("<slate_grey>AutoTransition deactivated.\n")
end

function toggleTransitionOn(name, line, args)
	autoTransition = true
	cecho("<lawn_green>AutoTransition activated.\n")
end

function transitionAuto(args)
   if (args == "on") then
      toggleTransitionOn()
   else
      if (args == "off") then
         toggleTransitionOff()
      else
         if(autoTransition == true) then
            toggleTransitionOff()
         else
            toggleTransitionOn()
         end
      end
   end
end

function newArmorAddM(mat, wearloc, cover, desc, restring, underlay, coating, keyword, enhance, work, number)
	--material wearloc cover 'desc' 'restring' underlay coating keyword enhance stitch number
	--davor about cover 'a black suit of armor' none bacta ablative armor yes yes 1
	newarmor.material = mat
	newarmor.wearloc  = wearloc
	newarmor.cover    = cover
	newarmor.desc     = desc
	newarmor.restring = restring
	newarmor.underlay = underlay
	newarmor.coating  = coating
	newarmor.keyword  = keyword
	newarmor.enhance  = enhance
	newarmor.work     = work
	local keyword = keyword
	for i=1, tonumber(number), 1 do
		newarmor.keyword = i .. "." .. keyword
		if ((newarmor.underlay ~= "") and (newarmor.enhance == "yes")) then
			expandAlias("eadd " .. newarmor.keyword .. " " .. newarmor.underlay)
		end
		if ((newarmor.coating ~= "") and (newarmor.enhance == "yes")) then
			expandAlias("eadd " .. newarmor.keyword .. " " .. newarmor.coating)
		end
		if (newarmor.work == "yes") then
			expandAlias("aadd " .. newarmor.keyword)
		end
		addNAItem(newarmor)  -- add item to the queue
	end
	
	newarmor = {
		material = "",
		wearloc = "",
		cover = "",
		desc = "",
		restring = "",
		underlay = "",
		coating = "",
		keyword = "",
		work = "",
		enhance = ""
		}
end
	
--This is the old 'newarmor' from MUSHClient. Mudlet does not have an input box like mudlet does, so I'm commenting this out just in case.
--function newArmorAdd(name, line, args)
--	newarmor.material = utils.inputbox("Material to be used?", "Material", "rethin", "Courier", 9)
--	newarmor.wearloc =  utils.inputbox("Wear location for new piece?", "Wear Location", "about", "Courier", 9)
--	newarmor.cover =    utils.inputbox("Cover or nocover?", "Cover/Nocover", "cover", "Courier", 9)
--	newarmor.desc =     utils.inputbox("Desc for new armor?", "Description", "Description", "Courier", 9)
--	newarmor.restring = utils.inputbox("Restring for armor? (leave blank for none)", "Restring", "Restring", "Courier", 9)
-- newarmor.underlay = utils.inputbox("Underlay for armor?", "Underlay", "bacta", "Courier", 9)
--	newarmor.coating  = utils.inputbox("Coating for armor?", "Coating", "ablative", "Courier", 9)
--	newarmor.keyword  = utils.inputbox("Keyword for armor?", "Keyword", "armor", "Courier", 9)
--	newarmor.enhance  = utils.inputbox("Autoenhancing?", "Enhance?", "yes", "Courier", 9)
--	newarmor.work     = utils.inputbox("Autostitching?", "Stitch?", "yes", "Courier", 9)
--	if ((newarmor.underlay ~= "") and (newarmor.enhance == "yes")) then
--		Execute("eadd " .. newarmor.keyword .. " " .. newarmor.underlay)
--	end
--	if ((newarmor.coating ~= "") and (newarmor.enhance == "yes")) then
--		Execute("eadd " .. newarmor.keyword .. " " .. newarmor.coating)
--	end
--	if (newarmor.work == "yes") then
--		Execute("aadd " .. newarmor.keyword)
--	end
--	addNAItem(newarmor)  -- add item to the queue
--	
--	newarmor = {
--	material = "",
--	wearloc = "",
--	cover = "",
--	desc = "",
--	restring = "",
--	underlay = "",
--	coating = "",
--	keyword = "",
--	work = "",
--	enhance = ""
--	}
--end

function NANext()
	currentNA = currentNA + 1
	if (currentNA > #NAList) then  -- reached end of list
		cecho("<green>New Armor Making complete.\n")      -- finished
		toggleNAOff()
		enhanceStart() -- start enhancing armors
	else                                    -- middle of list
		newArmor()  -- finally, make armor
	end
end

function NAStart()
	if (#NAList > 0) then -- we have new armors to make
		currentNA = 0
		toggleTransitionOn()
		toggleNAOn()
		NANext()
	else
		cecho("<tomato>No new armors to make!\n")
		toggleNAOff()
	end
   disableTrigger("LotJBulkArmor")
end

function newArmor()
	if (NAList[currentNA]) then
		send("makearmor " .. NAList[currentNA].material .. " " .. NAList[currentNA].wearloc .. " " .. NAList[currentNA].cover .. " " .. NAList[currentNA].desc)
	else
		cecho("<tomato>New Armor Making list empty, aborting!\n")
		toggleNAOff()
	end
end

function addNAItem(item)
	t = #NAList -- Find the size of the list
	if (t == 0) then
		table.insert(NAList, 1, item) -- Make first entry
	else
		table.insert(NAList, item) -- Make subsequent entries
	end
	cecho("Added keyword '" .. item.keyword .. "' to New Armor List.\n")
end

function displayNAList()
	cecho("<slate_gray>New Armor List Contains: \n")
	for k, v in ipairs(NAList) do
		cecho(v.keyword .. ":")
		for ke, va in ipairs(v) do
 			cecho("<slate_grey>  " .. tostring(ke) .. ":" .. tostring(va))
	    end     
   end
end

function clearNAList()
	NAList = {}
	newarmor = {
	material = "",
	wearloc = "",
	cover = "",
	desc = "",
	restring = "",
	underlay = "",
	coating = "",
	keyword = "",
	work = "",
	enhance = ""
	}
	cecho("<lawn_green>New Armor list cleared.\n")
	currentNA = 0
	toggleNAOff()
end

function toggleNAOn()
	newArmorAuto = true
	enableTrigger("NewArmor")
	cecho("<lawn_green>New Armor Making Activated.\n")
end

function toggleNAOff()
	newArmorAuto = false
	disableTrigger("NewArmor")
	cecho("<tomato>New Armor Making Deactivated.\n")
end

function displayNAHelp(name, line, args)
   cecho("<grey>New Armor Commands:\n")
   cecho("<grey>------------------------------\n")
   cecho("<grey>NewArmorAdd   - Add a new piece of armor to be crafted into the queue. Add armor to the list in the format:\n")
   cecho("<grey>                naaddm material wearloc cover 'desc' 'restring' underlay coating keyword enhance stitch number\n")
   cecho("<grey>NewArmorStart - Begin crafting new armors from start of queue, automatically moving on to enhancing and stitching\n")
   cecho("<grey>NewArmorList  - Display contents of armors to be crafted\n")
   cecho("<grey>NewArmorClear - Clear current list of new armors to be crafted\n")
   cecho("<grey>NewArmorHelp  - Show this command list\n")
   cecho("<grey>\n")
end -- function

function bactaNew(args)
	if (math.abs(previousBacta - tonumber(args)) > 0) then
		cecho("<cyan>" .. math.abs(previousBacta - tonumber(args)))
	end
	previousBacta = tonumber(args)
end

function toggleBactaOn(name, line, args)
	bactaCheck = true
	enableTrigger("BactaCheck")
	cecho("<cyan>BactaCheck activated.\n")
end

function toggleBactaOff()
	bactaCheck = false
	disableTrigger("BactaCheck")
	cecho("<slate_grey>BactaCheck deactivated.\n")
end

function switchBacta(args)
   if (args == "on") then
      toggleBactaOn()
   else
      if (args == "off") then
         toggleBactaOff()
      else
         if(bactaCheck == true) then
            toggleBactaOff()
         else
            toggleBactaOn()
         end
      end
   end
end